datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  email          String          @unique
  name           String?
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isActive       Boolean         @default(true)
  preferences    Json? // Store user preferences as JSON
  memories       Memory[]
  collaborations Collaboration[]
  notifications  Notification[] // New: Track user notifications
  ownedCapsules  Capsule[] // New: Explicit capsule ownership
}

model Memory {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  title         String // New: Add title for better organization
  description   String? // New: Optional description
  tags          String[] // New: Enable categorization and searching
  mediaContent  MediaContent? // New: Separate media content relationship
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  unlockDate    DateTime
  status        String          @default("locked") // New: Track memory status
  collaborators Collaboration[]
  secureStorage SecureStorage?
  AIOutput      AIOutput[]
  Capsule       Capsule[]

  @@index([userId, unlockDate]) // Optimize queries for unlock date checking
}

// New: Separate media content for better organization and storage optimization
model MediaContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  memoryId  String   @unique @db.ObjectId
  memory    Memory   @relation(fields: [memoryId], references: [id])
  text      String?
  images    Json // Store image metadata and URLs
  videos    Json // Store video metadata and URLs
  totalSize Int // Track total media size
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SecureStorage {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  memoryId      String   @unique @db.ObjectId
  memory        Memory   @relation(fields: [memoryId], references: [id])
  encryptionKey String
  storageType   String   @default("standard") // New: Support different storage types
  storedAt      DateTime @default(now())
  accessLog     Json? // New: Track access history
}

model Collaboration {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  memoryId  String    @db.ObjectId
  memory    Memory    @relation(fields: [memoryId], references: [id])
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  role      String    @default("viewer") // New: Define collaboration roles
  invitedAt DateTime  @default(now())
  status    String    @default("pending")
  expiresAt DateTime? // New: Optional collaboration expiration

  @@unique([memoryId, userId]) // Prevent duplicate collaborations
}

model AIOutput {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  memoryId    String    @db.ObjectId
  memory      Memory    @relation(fields: [memoryId], references: [id])
  type        String // e.g., "geminiAnalysis", "storytelling"
  content     Json // Changed to Json for flexible storage
  metadata    Json? // New: Store additional AI processing metadata
  generatedAt DateTime  @default(now())
  version     String // New: Track AI model versions
  videoUrl    String?
  status      String    @default("processing") // New: Track processing status
  Capsule     Capsule[]

  @@index([memoryId, type]) // Optimize queries by memory and type
}

model Capsule {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  memoryId      String    @db.ObjectId
  memory        Memory    @relation(fields: [memoryId], references: [id])
  ownerId       String    @db.ObjectId // New: Explicit owner
  owner         User      @relation(fields: [ownerId], references: [id])
  aiOutputId    String    @db.ObjectId
  aiOutput      AIOutput  @relation(fields: [aiOutputId], references: [id])
  title         String // New: Customizable title
  description   String? // New: Optional description
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isReady       Boolean   @default(false)
  shareSettings Json // New: Flexible sharing configuration
  accessLog     Json? // New: Track viewing history
  expiresAt     DateTime? // New: Optional expiration date

  @@index([ownerId, isReady]) // Optimize queries for ready capsules
}

// New: Handle user notifications
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  type      String // e.g., "capsule_ready", "collaboration_invite"
  content   Json
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId, isRead]) // Optimize queries for unread notifications
}
